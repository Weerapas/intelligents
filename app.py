import streamlit as st
import tensorflow as tf
import numpy as np
from keras_preprocessing import image
from PIL import Image
import os
from streamlit_option_menu import option_menu
import gdown


file_id2 = "1AjI-zbp-dBcFIIilD6u_z8HRm0oUYJ96"
output2 = "cat_dog_classifier.h5"  # р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щр╣Др╕Яр╕ер╣М .h5

# р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╕Ир╕▓р╕Б Google Drive
gdown.download(f"https://drive.google.com/uc?id={file_id2}", output2, quiet=False, verify=False)



# р╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕е Keras р╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М .h5


# р╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕ер╣Ар╕Юр╕╡р╕вр╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з

model = tf.keras.models.load_model(output2)

def predict(img):
    img = img.resize((128, 128))  # р╕Ыр╕гр╕▒р╕Ър╕Вр╕Щр╕▓р╕Фр╣Гр╕лр╣Йр╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╣Вр╕бр╣Ар╕Фр╕е
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array.astype('float32') / 255.0  # р╕Ыр╕гр╕▒р╕Ъ scale

    prediction = model.predict(img_array)
    return prediction.item()

# р╕кр╣Ир╕зр╕Щр╕Вр╕нр╕З Navigation Menu (Sidebar)
with st.sidebar:
    selected = option_menu(
        menu_title="р╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б",  
        options=["ЁЯПа р╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б", "Neural Network", "Machine Learning"],  
        icons=["house"],  
        menu_icon="cast",  
        default_index=0,  
    )

# р╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б
if selected == "ЁЯПа р╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б":
    st.title("ЁЯР╢ЁЯР▒ Cat vs Dog Classifier")
    st.write("р╣Вр╕бр╣Ар╕Фр╕е AI р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕│р╕Щр╕▓р╕вр╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Бр╕бр╕зр╕лр╕гр╕╖р╕нр╕кр╕╕р╕Щр╕▒р╕В!")

# р╕лр╕Щр╣Йр╕▓р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Чр╕│р╕Щр╕▓р╕вр╕ар╕▓р╕Ю
elif selected == "Neural Network":
    st.title("ЁЯУ╕ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю")
    uploaded_file = st.file_uploader("р╣Ар╕ер╕╖р╕нр╕Бр╣Др╕Яр╕ер╣Мр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image_display = Image.open(uploaded_file)
        st.image(image_display, caption="р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕Вр╕нр╕Зр╕Др╕╕р╕У", use_column_width=True)

        st.write("ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е...")
        prediction = predict(image_display)

        if prediction > 0.5:
            st.success(f'ЁЯж┤ р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕кр╕╕р╕Щр╕▒р╕В! (р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И: {round(prediction * 100, 2)}%)')
        else:
            st.success(f'ЁЯР▒ р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╣Бр╕бр╕з! (р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И: {round((1 - prediction) * 100, 2)}%)')

# р╕лр╕Щр╣Йр╕▓р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Бр╕нр╕Ы
elif selected == "Machine Learning":
    st.title("тД╣я╕П р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Бр╕нр╕Ыр╕Щр╕╡р╣Й")
    st.write("ЁЯУМ р╣Бр╕нр╕Ыр╕Щр╕╡р╣Йр╣Гр╕Кр╣Йр╣Вр╕бр╣Ар╕Фр╕е Deep Learning (CNN) р╣Гр╕Щр╕Бр╕▓р╕гр╕Ир╕│р╣Бр╕Щр╕Бр╕ар╕▓р╕Юр╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╣Бр╕бр╕зр╕лр╕гр╕╖р╕нр╕кр╕╕р╕Щр╕▒р╕В")
    st.write("ЁЯСитАНЁЯТ╗ р╕Юр╕▒р╕Тр╕Щр╕▓р╣Вр╕Фр╕в [р╣Гр╕кр╣Ир╕Кр╕╖р╣Ир╕нр╕Др╕╕р╕У]")

